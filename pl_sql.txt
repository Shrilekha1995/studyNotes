Normalization:
dividing the data into logical entities/table to avoid redundant data and the anamolies that comes with it.


First Normal Form (1NF)
For a table to be in the First Normal Form, it should follow the following 4 rules:

It should only have single(atomic) valued attributes/columns.
Values stored in a column should be of the same domain
All the columns in a table should have unique names.
And the order in which data is stored, does not matter.

Second Normal Form (2NF)
For a table to be in the Second Normal Form,

It should be in the First Normal form.
And, it should not have Partial Dependency.

Partial Dependency, where an attribute in a table depends on only a part of the primary key and not on the whole key.

Third Normal Form (3NF)
A table is said to be in the Third Normal Form when,

It is in the Second Normal form.
And, it doesn't have Transitive Dependency.

Boyce and Codd Normal Form (BCNF)
Boyce and Codd Normal Form is a higher version of the Third Normal form. This form deals with certain type of anomaly that is not handled by 3NF. A 3NF table which does not have multiple overlapping candidate keys is said to be in BCNF. For a table to be in BCNF, following conditions must be satisfied:

R must be in 3rd Normal Form
and, for each functional dependency ( X ? Y ), X should be a super Key.


Fourth Normal Form (4NF)
A table is said to be in the Fourth Normal Form when,

It is in the Boyce-Codd Normal Form.
And, it doesn't have Multi-Valued Dependency.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------FUNCTION------------------

A stored function is a special kind stored program that returns a single value. Typically, you use stored functions to encapsulate common formulas or 
business rules that are reusable among SQL statements or stored programs.

DELIMITER $$
 
CREATE FUNCTION function_name(
    param1,
    param2,…
)
RETURNS datatype
[NOT] DETERMINISTIC
BEGIN
 -- statements
END $$
 
DELIMITER ;

A deterministic function always returns the same result for the same input parameters whereas a non-deterministic function returns different results for the
same input parameters.
If you don’t use DETERMINISTIC or NOT DETERMINISTIC, MySQL uses the NOT DETERMINISTIC option by default.


DELIMITER $$
 
CREATE PROCEDURE GetCustomerLevel(
    IN  customerNo INT,  
    OUT customerLevel VARCHAR(20)
)
BEGIN
 
    DECLARE credit DEC(10,2) DEFAULT 0;
    
    -- get credit limit of a customer
    SELECT 
        creditLimit 
    INTO credit
    FROM customers
    WHERE 
        customerNumber = customerNo;
    
    -- call the function 
    SET customerLevel = CustomerLevel(credit);
END$$
 
DELIMITER ;


CALL GetCustomerLevel(-131,@customerLevel);
SELECT @customerLevel;


----------PROCEDURES--------------

A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.
So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.

Simple Procedure
--------------------------------------------------------------------------

DELIMITER $$
 
CREATE PROCEDURE GetCustomerLevel(
    IN  pCustomerNumber INT, 
    OUT p VARCHAR(20))
BEGIN
    DECLARE credit DECIMAL DEFAULT 0;
 
    SELECT credit
    INTO credit
    FROM demo
    WHERE tier = pCustomerNumber;
 
    IF credit > 800000 THEN
        SET p = 'PLATINUM';
    ELSE
        SET p = 'NOT PLATINUM';
    END IF;
END$$
 
DELIMITER ;

-------------------------------------------------------------------------CASE-WHEN-THEN

DELIMITER $$

CREATE PROCEDURE getCustomerShippingStatus(
	IN custNumber INT,
	OUT status VARCHAR(20)
)

BEGIN 
	DECLARE cName VARCHAR(20);
	SELECT country_name INTO cName
	FROM shipping
	WHERE id = custNumber;

	CASE cName
	WHEN 'USA' THEN
	SET status='6 day-shipping';
	WHEN 'INDIA' THEN
	SET status='3 day-shipping';
	WHEN 'UK' THEN
	SET status='5 day-shipping';
	WHEN 'AUSTRALIA' THEN
	SET status='cannot be shipped';
	ELSE
	SET status='INVALID ID';
	END CASE;
END $$

DELIMITER ; 
	
-------------------------------------------------------------------------------------------LOOP
drop procedure printEvenUsingProcedure;

DELIMITER //

CREATE PROCEDURE printEvenUsingProcedure()
BEGIN
	DECLARE x INT; 
	DECLARE str VARCHAR(50);

	SET x = 1;
	SET str = '';

	label: LOOP

	IF x > 20 THEN 
	LEAVE label;
	END IF; 

	SET x = x + 1;
	IF (x mod 2) THEN 
	ITERATE label;
	ELSE
	SET str = CONCAT(str,x,',');
	END IF;
	END LOOP;
	SELECT str;
END //

DELIMITER ;


------------------------------------------------------------------------------------------------------------------------

CREATE TABLE calendars(
    id INT AUTO_INCREMENT,
    fulldate DATE UNIQUE,
    day TINYINT NOT NULL,
    month TINYINT NOT NULL,
    quarter TINYINT NOT NULL,
    year INT NOT NULL,
    PRIMARY KEY(id)
);

DROP PROCEDURE InsertCalendar;

DELIMITER $$
 
CREATE PROCEDURE InsertCalendar(dt DATE)
BEGIN
    INSERT INTO calendars(
        dt,
        day,
        month,
        quarter,
        year
    )
    VALUES(
        CURDATE(), 
        EXTRACT(DAY FROM dt),
        EXTRACT(MONTH FROM dt),
        EXTRACT(QUARTER FROM dt),
        EXTRACT(YEAR FROM dt)
    );
END$$
 
DELIMITER ;


DROP PROCEDURE LoadCalendars;

DELIMITER $$
 
CREATE PROCEDURE LoadCalendars(
    startDate DATE, 
    day INT
)
BEGIN
    
    DECLARE counter INT DEFAULT 1;
    DECLARE dt DATE DEFAULT startDate;
 
    WHILE counter <= day DO
        CALL InsertCalendar(dt);
        SET counter = counter + 1;
        SET dt = DATE_ADD(dt,INTERVAL 1 day);
    END WHILE;
 
END$$
 
DELIMITER ;

----------------------------------------------------------------------------------WHILE

drop procedure WhileLoopExample;

DELIMITER //

CREATE PROCEDURE WhileLoopExample()

BEGIN 
	DECLARE x INT;
	DECLARE str VARCHAR(50);

	SET x=1;
	SET str='';
	
	WHILE (x < 20) DO
	SET x = x + 2;
	SET str = CONCAT(str, x, ',');
	END WHILE;
	SELECT str;
END //

DELIMITER ;

---------------------------------------------------------------------------------------------REPEAT


drop procedure repeatLoopExample;

DELIMITER //

CREATE PROCEDURE repeatLoopExample()

BEGIN 
	DECLARE x INT DEFAULT 1;
	DECLARE str VARCHAR(50) DEFAULT '';
	
	REPEAT 
	SET str = CONCAT(str, x, ',');
	SET x = x + 2;
	UNTIL x>21	
	END REPEAT;
	SELECT str;
END //

DELIMITER ;

----------------------------------------------------------------------------------------------------------------------

--------CURSORS-------------------

To handle a result set inside a stored procedure, you use a cursor. 
A cursor allows you to iterate a set of rows returned by a query and process each row individually.
A cursor is a control structure used in databases to go through the database records. It is very similar to the iterator provided by many programming languages. 
In addition to traversing through records in a database, cursors also facilitate data retrieval, adding and deleting records

MySQL cursor is read-only, non-scrollable and asensitive.

Read-only: you cannot update data in the underlying table through the cursor.
Non-scrollable: you can only fetch rows in the order determined by the SELECT statement. You cannot fetch rows in the 
reversed order. In addition, you cannot skip rows or jump to a specific row in the result set.
Asensitive: there are two kinds of cursors: asensitive cursor and insensitive cursor. An asensitive cursor points 
to the actual data, whereas an insensitive cursor uses a temporary copy of the data. An asensitive cursor performs 
aster than an insensitive cursor because it does not have to make a temporary copy of data. However, any change that 
made to the data from other connections will affect the data that is being used by an asensitive cursor, therefore, 
it is safer if you do not update the data that is being used by an asensitive cursor. MySQL cursor is asensitive.
You can use MySQL cursors in stored procedures, stored functions, and triggers.



Working with MySQL cursor
----------

->DECLARE cursor_name CURSOR FOR SELECT_statement;

The cursor declaration must be after any variable declaration. If you declare a cursor before the variable declarations, 
MySQL will issue an error. A cursor must always associate with a SELECT statement.

->OPEN cursor_name;
->FETCH cursor_name INTO variables list;
->CLOSE cursor_name;

It is a good practice to always close a cursor when it is no longer used.

When working with MySQL cursor, you must also declare a NOT FOUND handler to handle the situation when the cursor could 
not find any row.

Because each time you call the FETCH statement, the cursor attempts to read the next row in the result set. 
When the cursor reaches the end of the result set, it will not be able to get the data, and a condition is raised. 
The handler is used to handle this condition.

->DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

The finished is a variable to indicate that the cursor has reached the end of the result set.
Notice that the handler declaration must appear after variable and cursor declaration inside the stored procedures.

First, declare some variables, a cursor for looping over the emails of employees, and a NOT FOUND handler:
DECLARE variables;
 records;
 create a cursor;
 BEGIN 
OPEN cursor; 
FETCH cursor;
 process the records;
 CLOSE cursor; 
END;

DELIMITER $$

CREATE PROCEDURE createEmailList (
    INOUT emailList varchar(4000)
)
BEGIN
    DECLARE finished INTEGER DEFAULT 0;
    DECLARE emailAddress varchar(100) DEFAULT "";
 
    -- declare cursor for employee email
    DECLARE curEmail 
        CURSOR FOR 
            SELECT email FROM employees;
 
    -- declare NOT FOUND handler
    DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;
 
    OPEN curEmail;
 
    getEmail: LOOP
        FETCH curEmail INTO emailAddress;
        IF finished = 1 THEN 
            LEAVE getEmail;
        END IF;
        -- build email list
        SET emailList = CONCAT(emailAddress,";",emailList);
    END LOOP getEmail;
    CLOSE curEmail;
END$$
DELIMITER ;



-----------ERROR HANDLING IN PROCEDURE---------

drop procedure SupplierProductProdure;

DELIMITER $$

CREATE PROCEDURE SupplierProductProdure(
	IN sId INT, 
	IN pId INT
)
BEGIN    
DECLARE EXIT HANDLER FOR 1062
    SELECT CONCAT('Duplicate key has occurred') AS Message;
	INSERT INTO product_supply(supplierId, productId) 
	VALUES (sId, pId);

	SELECT COUNT(*) FROM 
	product_supply 
	WHERE supplierId = sId;
END$$
 
DELIMITER ;

call SupplierProductProdure(1,1);



*>An error always maps to a MySQL error code because in MySQL it is the most specific.
*>An SQLSTATE may map to many MySQL error codes, therefore, it is less specific.
*>An SQLEXCPETION or an SQLWARNING is the shorthand for a class of SQLSTATES values so it is the most generic.

Based on the handler precedence rules,  MySQL error code handler, SQLSTATE handler and SQLEXCEPTION takes the first, 
second and third precedence.

drop procedure SupplierProductProdure;

DELIMITER $$

CREATE PROCEDURE SupplierProductProdure(
	IN sId INT, 
	IN pId INT
)
BEGIN    
    DECLARE EXIT HANDLER FOR 1062 SELECT 'Duplicate keys error encountered' Message; 
    DECLARE EXIT HANDLER FOR SQLEXCEPTION SELECT 'SQLException encountered' Message; 
    DECLARE EXIT HANDLER FOR SQLSTATE '23000' SELECT 'SQLSTATE 23000' ErrorCode;

	INSERT INTO product_supply(supplierId, productId) 
	VALUES (sId, pId);
END$$
 
DELIMITER ;

call SupplierProductProdure(1,1);


-------------------------------------------------------------------------------------------------------------------

--------------TRIGGERS---------------

A trigger is a procedure (code segment) that is executed automatically when some specific events occur in a table/view of a database. Among its other uses, 
triggers are mainly used for maintaining integrity in a database. Triggers are also used for enforcing business rules, auditing changes in the database and 
replicating data. 

(INSERT)

DROP TABLE IF EXISTS members;
 
CREATE TABLE members (
    id INT AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(255),
    birthDate DATE,
    PRIMARY KEY (id)
);


DROP TABLE IF EXISTS reminders;
 
CREATE TABLE reminders (
    id INT AUTO_INCREMENT,
    memberId INT,
    message VARCHAR(255) NOT NULL,
    PRIMARY KEY (id , memberId)
);


DELIMITER $$
 
CREATE TRIGGER after_members_insert
AFTER INSERT
ON members FOR EACH ROW
BEGIN
    IF NEW.birthDate IS NULL THEN
        INSERT INTO reminders(memberId, message)
        VALUES(new.id,CONCAT('Hi ', NEW.name, ', please update your date of birth.'));
    END IF;
END$$
 
DELIMITER ;





DELIMITER //


CREATE TRIGGER after_emp_insert AFTER INSERT 
ON employees FOR EACH ROW
BEGIN
	IF NEW.birthDate IS NULL THEN 
	INSERT INTO reminders(empId, message)
	VALUES(new.id, CONCAT('Hi ', NEW.name, ', please update your date of birth'));
	END IF;
END //

DELIMITER ;  

INSERT INTO employees VALUES(1, 'abc', NULL);
---------------------
(UPDATE)


DROP TABLE IF EXISTS sales;
 
CREATE TABLE sales (
    id INT AUTO_INCREMENT,
    product VARCHAR(100) NOT NULL,
    quantity INT NOT NULL DEFAULT 0,
    fiscalYear SMALLINT NOT NULL,
    fiscalMonth TINYINT NOT NULL,
    CHECK(fiscalMonth >= 1 AND fiscalMonth <= 12),
    CHECK(fiscalYear BETWEEN 2000 and 2050),
    CHECK (quantity >=0),
    UNIQUE(product, fiscalYear, fiscalMonth),
    PRIMARY KEY(id)
);



INSERT INTO sales(product, quantity, fiscalYear, fiscalMonth)
VALUES
    ('2003 Harley-Davidson Eagle Drag Bike',120, 2020,1),
    ('1969 Corvair Monza', 150,2020,1),
    ('1970 Plymouth Hemi Cuda', 200,2020,1);


DELIMITER $$
 
CREATE TRIGGER before_sales_update
BEFORE UPDATE
ON sales FOR EACH ROW
BEGIN
    DECLARE errorMessage VARCHAR(255);
    SET errorMessage = CONCAT('The new quantity ',
                        NEW.quantity,
                        ' cannot be 3 times greater than the current quantity ',
                        OLD.quantity);
                        
    IF new.quantity > old.quantity * 3 THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = errorMessage;
    END IF;
END $$
 
DELIMITER ;


--------------------------CREATING EVENTS IN MYSQL----

CREATE EVENT myEvent
ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 MINUTE
DO 
	INSERT INTO message VALUES(1, 'Testing the first Event', NOW());


Creating a recurring event--------

CREATE EVENT myRecurringEvent
ON SCHEDULE EVERY 1 MINUTE 
STARTS CURRENT_TIMESTAMP
ENDS CURRENT_TIMESTAMP + INTERVAL 5 MINUTE
DO 
	INSERT INTO message(id, text, time)
	VALUES(1, 'this is a recurrring text at', NOW()); 



















